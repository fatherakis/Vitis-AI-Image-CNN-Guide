# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class CifarResNet(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(CifarResNet, self).__init__()
        self.module_0 = py_nndct.nn.Input() #CifarResNet::input_0(CifarResNet::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=3, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Conv2d[conv1]/ret.3(CifarResNet::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/ReLU[relu]/3572(CifarResNet::nndct_relu_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[0]/Conv2d[conv1]/ret.7(CifarResNet::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[0]/ReLU[relu]/3600(CifarResNet::nndct_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[0]/Conv2d[conv2]/ret.11(CifarResNet::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[0]/3629(CifarResNet::nndct_elemwise_add_6)
        self.module_7 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[0]/ReLU[relu]/3630(CifarResNet::nndct_relu_7)
        self.module_8 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[1]/Conv2d[conv1]/ret.15(CifarResNet::nndct_conv2d_8)
        self.module_9 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[1]/ReLU[relu]/3658(CifarResNet::nndct_relu_9)
        self.module_10 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[1]/Conv2d[conv2]/ret.19(CifarResNet::nndct_conv2d_10)
        self.module_11 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[1]/3687(CifarResNet::nndct_elemwise_add_11)
        self.module_12 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[1]/ReLU[relu]/3688(CifarResNet::nndct_relu_12)
        self.module_13 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[2]/Conv2d[conv1]/ret.23(CifarResNet::nndct_conv2d_13)
        self.module_14 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[2]/ReLU[relu]/3716(CifarResNet::nndct_relu_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[2]/Conv2d[conv2]/ret.27(CifarResNet::nndct_conv2d_15)
        self.module_16 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[2]/3745(CifarResNet::nndct_elemwise_add_16)
        self.module_17 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer1]/BasicBlock[2]/ReLU[relu]/3746(CifarResNet::nndct_relu_17)
        self.module_18 = py_nndct.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[0]/Conv2d[conv1]/ret.31(CifarResNet::nndct_conv2d_18)
        self.module_19 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[0]/ReLU[relu]/3774(CifarResNet::nndct_relu_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[0]/Conv2d[conv2]/ret.35(CifarResNet::nndct_conv2d_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=16, out_channels=32, kernel_size=[1, 1], stride=[2, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[0]/Sequential[downsample]/Conv2d[0]/ret.39(CifarResNet::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[0]/3830(CifarResNet::nndct_elemwise_add_22)
        self.module_23 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[0]/ReLU[relu]/3831(CifarResNet::nndct_relu_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[1]/Conv2d[conv1]/ret.43(CifarResNet::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[1]/ReLU[relu]/3859(CifarResNet::nndct_relu_25)
        self.module_26 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[1]/Conv2d[conv2]/ret.47(CifarResNet::nndct_conv2d_26)
        self.module_27 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[1]/3888(CifarResNet::nndct_elemwise_add_27)
        self.module_28 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[1]/ReLU[relu]/3889(CifarResNet::nndct_relu_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[2]/Conv2d[conv1]/ret.51(CifarResNet::nndct_conv2d_29)
        self.module_30 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[2]/ReLU[relu]/3917(CifarResNet::nndct_relu_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[2]/Conv2d[conv2]/ret.55(CifarResNet::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[2]/3946(CifarResNet::nndct_elemwise_add_32)
        self.module_33 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer2]/BasicBlock[2]/ReLU[relu]/3947(CifarResNet::nndct_relu_33)
        self.module_34 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[0]/Conv2d[conv1]/ret.59(CifarResNet::nndct_conv2d_34)
        self.module_35 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[0]/ReLU[relu]/3975(CifarResNet::nndct_relu_35)
        self.module_36 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[0]/Conv2d[conv2]/ret.63(CifarResNet::nndct_conv2d_36)
        self.module_37 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[2, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[0]/Sequential[downsample]/Conv2d[0]/ret.67(CifarResNet::nndct_conv2d_37)
        self.module_38 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[0]/4031(CifarResNet::nndct_elemwise_add_38)
        self.module_39 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[0]/ReLU[relu]/4032(CifarResNet::nndct_relu_39)
        self.module_40 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[1]/Conv2d[conv1]/ret.71(CifarResNet::nndct_conv2d_40)
        self.module_41 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[1]/ReLU[relu]/4060(CifarResNet::nndct_relu_41)
        self.module_42 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[1]/Conv2d[conv2]/ret.75(CifarResNet::nndct_conv2d_42)
        self.module_43 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[1]/4089(CifarResNet::nndct_elemwise_add_43)
        self.module_44 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[1]/ReLU[relu]/4090(CifarResNet::nndct_relu_44)
        self.module_45 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[2]/Conv2d[conv1]/ret.79(CifarResNet::nndct_conv2d_45)
        self.module_46 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[2]/ReLU[relu]/4118(CifarResNet::nndct_relu_46)
        self.module_47 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[2]/Conv2d[conv2]/ret.83(CifarResNet::nndct_conv2d_47)
        self.module_48 = py_nndct.nn.Add() #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[2]/4147(CifarResNet::nndct_elemwise_add_48)
        self.module_49 = py_nndct.nn.ReLU(inplace=True) #CifarResNet::CifarResNet/Sequential[layer3]/BasicBlock[2]/ReLU[relu]/4148(CifarResNet::nndct_relu_49)
        self.module_50 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #CifarResNet::CifarResNet/AdaptiveAvgPool2d[avgpool]/4165(CifarResNet::nndct_adaptive_avg_pool2d_50)
        self.module_51 = py_nndct.nn.Module('nndct_shape') #CifarResNet::CifarResNet/4168(CifarResNet::nndct_shape_51)
        self.module_52 = py_nndct.nn.Module('nndct_reshape') #CifarResNet::CifarResNet/ret.89(CifarResNet::nndct_reshape_52)
        self.module_53 = py_nndct.nn.Linear(in_features=64, out_features=10, bias=True) #CifarResNet::CifarResNet/Linear[fc]/ret(CifarResNet::nndct_dense_53)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_3 = self.module_3(output_module_0)
        output_module_3 = self.module_4(output_module_3)
        output_module_3 = self.module_5(output_module_3)
        output_module_3 = self.module_6(input=output_module_3, other=output_module_0, alpha=1)
        output_module_3 = self.module_7(output_module_3)
        output_module_8 = self.module_8(output_module_3)
        output_module_8 = self.module_9(output_module_8)
        output_module_8 = self.module_10(output_module_8)
        output_module_8 = self.module_11(input=output_module_8, other=output_module_3, alpha=1)
        output_module_8 = self.module_12(output_module_8)
        output_module_13 = self.module_13(output_module_8)
        output_module_13 = self.module_14(output_module_13)
        output_module_13 = self.module_15(output_module_13)
        output_module_13 = self.module_16(input=output_module_13, other=output_module_8, alpha=1)
        output_module_13 = self.module_17(output_module_13)
        output_module_18 = self.module_18(output_module_13)
        output_module_18 = self.module_19(output_module_18)
        output_module_18 = self.module_20(output_module_18)
        output_module_21 = self.module_21(output_module_13)
        output_module_18 = self.module_22(input=output_module_18, other=output_module_21, alpha=1)
        output_module_18 = self.module_23(output_module_18)
        output_module_24 = self.module_24(output_module_18)
        output_module_24 = self.module_25(output_module_24)
        output_module_24 = self.module_26(output_module_24)
        output_module_24 = self.module_27(input=output_module_24, other=output_module_18, alpha=1)
        output_module_24 = self.module_28(output_module_24)
        output_module_29 = self.module_29(output_module_24)
        output_module_29 = self.module_30(output_module_29)
        output_module_29 = self.module_31(output_module_29)
        output_module_29 = self.module_32(input=output_module_29, other=output_module_24, alpha=1)
        output_module_29 = self.module_33(output_module_29)
        output_module_34 = self.module_34(output_module_29)
        output_module_34 = self.module_35(output_module_34)
        output_module_34 = self.module_36(output_module_34)
        output_module_37 = self.module_37(output_module_29)
        output_module_34 = self.module_38(input=output_module_34, other=output_module_37, alpha=1)
        output_module_34 = self.module_39(output_module_34)
        output_module_40 = self.module_40(output_module_34)
        output_module_40 = self.module_41(output_module_40)
        output_module_40 = self.module_42(output_module_40)
        output_module_40 = self.module_43(input=output_module_40, other=output_module_34, alpha=1)
        output_module_40 = self.module_44(output_module_40)
        output_module_45 = self.module_45(output_module_40)
        output_module_45 = self.module_46(output_module_45)
        output_module_45 = self.module_47(output_module_45)
        output_module_45 = self.module_48(input=output_module_45, other=output_module_40, alpha=1)
        output_module_45 = self.module_49(output_module_45)
        output_module_45 = self.module_50(output_module_45)
        output_module_51 = self.module_51(input=output_module_45, dim=0)
        output_module_52 = self.module_52(input=output_module_45, shape=[output_module_51,-1])
        output_module_52 = self.module_53(output_module_52)
        return output_module_52
